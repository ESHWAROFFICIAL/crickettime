<canvas id="canvas">Canvas is not supported in your browser.</canvas>



html
if condition only


body, html {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
}
#canvas {
    position:absolute;
}



html and css



//////////////////
// The main things
//////////////////

"use strict"
var c;
var ctx;
var cellWidth = 200;
var cells = [];
var pause = false;

window.onkeydown = function(e){

  if(e.code == "Escape"){
    if(pause){
      pause = false;
      update();
    } else {
      pause = true;
    }
  }

}

window.onload = function(){

  c = document.getElementById("canvas");
  ctx = c.getContext("2d");

  c.width = window.innerWidth;
  c.height = window.innerHeight;

  cols = Math.floor(c.width / cellWidth);
  for(var i = 0; i < cols; i++){
    cells[i] = [];
  }

  rows = Math.floor(c.height / cellWidth);
  for(var i = 0; i < cols; i++){
    for(var j = 0; j < rows; j++){
      cells[i][j] = new Cell(i, j);
    }
  }

  c.width = cols * cellWidth;
  c.height = rows * cellWidth;

  start = cells[0][0];
  end = cells[cols - 1][rows - 1];

  openSet[0] = start;
  openSet[0].h = calcH(start.coor, end.coor);

  for(var i = 0; i < rocketsC; i++){
    rockets[i] = new Rocket();
  }

  generateMaze();
  update();

}

function update(){

  if(!pause){

    window.requestAnimationFrame(update);

    ctx.fillStyle = "Black";
    ctx.fillRect(0, 0, c.width, c.height);

    for(var i = 0; i < cols; i++){
      for(var j = 0; j < rows; j++){
        cells[i][j].update();
      }
    }

    if(pfDone){
      ctx.fillStyle = "#7dffb4";
      ctx.beginPath();
      ctx.arc(end.pos.x + cellWidth / 2, end.pos.y + cellWidth / 2, 20, 0, Math.PI * 2);
      ctx.fill();
    }

    if(!mazeLoaded){
      generateMaze();
    } else if(!pfDone){
      current = undefined;
      findPath();
    } else {
      drawPath();

      lifeC++;

      for(var i = 0; i < rockets.length; i++){

        if(!rockets[i].crashed && !rockets[i].finished){
          break;
        }

        if(i + 1 == rockets.length){
          lifeC = lifeLen;
        }
      }

      if(lifeC >= lifeLen){

        for(var i = 0; i < rockets.length; i++){
          rockets[i].calcFit();
        }
        // console.clear();
        // for(var i = 0; i < rockets.length; i++){
        //   console.log("Fitness ID " + i + ": " + rockets[i].fit);
        // }
        // console.log("Max fit: " + maxFit);
        // debugger;
        rocketsCopy = rockets.slice();
        for(var i = 0; i < rockets.length; i++){
          chooseParents();
        }

        lifeC = 0;
        maxFit = 0;
        nextGenC = 0;

      }

      for(var i = 0; i < rockets.length; i++){
        rockets[i].update();
      }

    }

  }

}


/////////////
// The rocket
/////////////

function Rocket(genes){

  this.height = 35;
  this.width = 5;

  this.pos = Math.createVector(cells[0][0].pos.x + cellWidth / 2 - this.width / 2, cells[0][0].pos.y + cellWidth / 2 - this.height / 2);
  this.vel = Math.createVector(0, 0);
  this.color = "Yellow";

  this.deAcc = 0.95;
  this.maxForce = 1.25;
  this.minForce = 0.5;

  this.crashed = false;
  this.finished = false;
  this.radiusDet = this.height / 2.50;
  this.finishDet = 20;
  this.cellDet = 1;

  this.pathC = null;
  this.bonus = 10;

  this.fit;
  this.maxDistance = Math.distance(0, 0, cellWidth, cellWidth);

  if(genes != undefined){
    this.genes = genes;
  } else {

    this.genes = [];
    for(var i = 0; i < lifeLen; i++){

      var deg = Math.radians(Math.randomFloat(0, 360));
      var force = Math.randomFloat(this.minForce, this.maxForce);

      this.genes[i] = {
        x: Math.cos(deg) * force,
        y: Math.sin(deg) * force
      };

    }

  }

  this.checkCollisionCells = function(){

    for(var i = 0; i < cells.length; i++){
      for(var j = 0; j < cells[i].length; j++){

        var c = cells[i][j];

        if(c.walls.right){
          if((this.pos.x + this.radiusDet >= c.pos.x + cellWidth - this.cellDet)
          && (this.pos.x - this.radiusDet <= c.pos.x + cellWidth + this.cellDet)
          && (this.pos.y >= c.pos.y)
          && (this.pos.y <= c.pos.y + cellWidth)){
            return true;
          }
        }

        if(c.walls.left){
          if((this.pos.x + this.radiusDet >= c.pos.x - this.cellDet)
          && (this.pos.x - this.radiusDet <= c.pos.x + this.cellDet)
          && (this.pos.y >= c.pos.y)
          && (this.pos.y <= c.pos.y + cellWidth)){
            return true;
          }
        }

        if(c.walls.up){
          if((this.pos.y + this.radiusDet >= c.pos.y - this.cellDet)
          && (this.pos.y - this.radiusDet <= c.pos.y + this.cellDet)
          && (this.pos.x >= c.pos.x)
          && (this.pos.x <= c.pos.x + cellWidth)){
            return true;
          }
        }

        if(c.walls.down){
          if((this.pos.y + this.radiusDet >= c.pos.y + cellWidth - this.cellDet)
          && (this.pos.y - this.radiusDet <= c.pos.y + cellWidth + this.cellDet)
          && (this.pos.x >= c.pos.x)
          && (this.pos.x <= c.pos.x + cellWidth)){
            return true;
          }
        }

      }
    }

    return false;
  }

  this.checkCollision = function(){

    var crashed = false;
    if(this.pos.x - this.radiusDet <= 0){
      crashed = true;
    } else if(this.pos.x + this.radiusDet >= c.width){
      crashed = true;
    } else if(this.pos.y - this.radiusDet <= 0){
      crashed = true;
    } else if(this.pos.y + this.radiusDet >= c.height){
      crashed = true;
    } else {
      crashed = this.checkCollisionCells();
    }

    return crashed;
  }

  this.checkPathNode = function(){
		
		if(this.pathC - 1 == -1){
			
			var p = path[this.pathC];
			
			if(Math.distance(this.pos.x, this.pos.y, p.pos.x + cellWidth / 2, p.pos.y + cellWidth / 2) <= this.finishDet){
				
				this.finished = true;
				return;
				
			}
			
		}
		
    for(var i = this.pathC - 1; i >= 0; i--){

      var p = path[i];

      if((this.pos.x >= p.pos.x)
      && (this.pos.x <= p.pos.x + cellWidth)
      && (this.pos.y >= p.pos.y)
      && (this.pos.y <= p.pos.y + cellWidth)){

        this.pathC = i;

      }

    }

  }

  this.calcFit = function(){

    this.fit = Math.distance(this.pos.x, this.pos.y, path[this.pathC].pos.x + cellWidth / 2, path[this.pathC].pos.y + cellWidth / 2);
    // this.fit = Math.distance(this.pos.x, this.pos.y, path[this.pathC].pos.x + cellWidth / 2, path[this.pathC].pos.y + cellWidth / 2);
    this.fit = Math.normalize(this.fit, this.maxDistance, 0, 0, 1);

    if(this.crashed){
      this.fit /= this.bonus;
    }

    if(this.finished){
      this.fit *= this.bonus * this.bonus;
    }

    if(this.pathC != path.length - 1){
      this.fit += path.length - 1 - this.pathC;
    }

    this.fit *= this.fit;

    if(this.fit > maxFit){
      maxFit = this.fit;
    }

  }

  this.render = function(){

    ctx.fillStyle = this.color;

    ctx.save();

    ctx.translate(this.pos.x, this.pos.y);
    ctx.rotate(Math.atan2(this.vel.y, this.vel.x) + Math.radians(90));

    ctx.fillRect(0 - this.width / 2, 0 - this.height / 2, this.width, this.height);

    ctx.restore();

  }

  this.updatePos = function(){

    this.vel.x += this.genes[lifeC].x;
    this.vel.y += this.genes[lifeC].y;

    this.pos.x += this.vel.x;
    this.pos.y += this.vel.y;

    this.vel.x *= this.deAcc;
    this.vel.y *= this.deAcc;

  }

  this.update = function(){

    if(this.pathC == null){
      this.pathC = path.length - 1;
    }

    if(!this.crashed && !this.finished){
      this.crashed = this.checkCollision();
      this.checkPathNode();
      this.updatePos();
    } else if(this.finished){
      this.pos = {
        x: end.pos.x + cellWidth / 2,
        y: end.pos.y + cellWidth / 2
      };
    }
    this.render();

  }

}


////////////////////////////
// Maze generator algorithms
////////////////////////////

var current;
var cols;
var rows;
var stack = [];
var mazeLoaded = false;

function generateMaze(){

  if(current == undefined){
    current = cells[0][0];
  }

  var next = current.chooseNext();
  if(next != undefined){

    removeWall(current, next);

    current.visited = true;
    stack.push(current);
    current = next;

  } else if(stack.length > 0){

    current.visited = true;
    current = stack.pop();

  } else {
    if(!mazeLoaded){
      console.log("Maze loaded.");
    }
    mazeLoaded = true;
  }

  if(!mazeLoaded){
    ctx.fillStyle = "Yellow";
    ctx.fillRect(current.pos.x, current.pos.y, cellWidth, cellWidth);
  }

}

function removeWall(a, b){

  var x = a.coor.x - b.coor.x;
  if(x == -1){
    a.walls.right = false;
    b.walls.left = false;
  } else if(x == 1){
    a.walls.left = false;
    b.walls.right = false;
  }

  var y = a.coor.y - b.coor.y;
  if(y == -1){
    a.walls.down = false;
    b.walls.up = false;
  } else if(y == 1){
    a.walls.up = false;
    b.walls.down = false;
  }

}


/////////////////////
// Genetic algorithms
/////////////////////

var rockets = [];
var rocketsC = 200;
var lifeC = 0;
var lifeLen = 1500;
var maxFit = 0;
var rocketsCopy;
var nextGenC = 0;
var mutPer = 0.01;

function chooseParents(){

  var done = false;
  var parentADone = false;
  var parentBDone = false;
  while(!done){

    if(!parentADone){
      var parA = Math.randomInt(0, rocketsCopy.length - 1);
    }

    if(!parentBDone){
      var parB = Math.randomInt(0, rocketsCopy.length - 1);
    }

    if(Math.randomFloat(0, maxFit) <= rocketsCopy[parA].fit && !parentADone){
      parentADone = true;
    }

    if(Math.randomFloat(0, maxFit) <= rocketsCopy[parB].fit && !parentBDone){
      parentBDone = true;
    }

    if(parA == parB){
      parentADone = parentBDone = false;
    }

    if(parentADone && parentBDone){
      done = true;
    }

  }

  crossOver(parA, parB);
}

function mutation(genes){

  for(var i = 0; i < lifeLen; i++){

    if(Math.randomFloat(0, 1) < mutPer){

      var deg = Math.radians(Math.randomFloat(0, 360));
      var force = Math.randomFloat(rockets[nextGenC].minForce, rockets[nextGenC].maxForce);

      genes[i] = {
        x: Math.cos(deg) * force,
        y: Math.sin(deg) * force
      };

    }

  }

  return genes;
}

function crossOver(parA, parB){

  var genes = [];

  var r = Math.randomInt(0, 2);
  if(r == 0){

    var breakPoint = Math.randomInt(0, rockets.length - 1);

    for(var i = 0; i < lifeLen; i++){

      if(i < breakPoint){
        genes[i] = {
          x: rocketsCopy[parA].genes[i].x,
          y: rocketsCopy[parA].genes[i].y
        };
      } else {
        genes[i] = {
          x: rocketsCopy[parB].genes[i].x,
          y: rocketsCopy[parB].genes[i].y
        };
      }

    }

  } else if(r == 1){

    for(var i = 0; i < lifeLen; i++){

      if(i & 2 == 0){
        genes[i] = {
          x: rocketsCopy[parA].genes[i].x,
          y: rocketsCopy[parA].genes[i].y
        };
      } else {
        genes[i] = {
          x: rocketsCopy[parB].genes[i].x,
          y: rocketsCopy[parB].genes[i].y
        };
      }

    }

  } else {

    var breakPoint = Math.randomInt(0, rockets.length - 1);

    for(var i = 0; i < lifeLen; i++){

      if(i < breakPoint){
        genes[i] = {
          x: rocketsCopy[parB].genes[i].x,
          y: rocketsCopy[parB].genes[i].y
        };
      } else {
        genes[i] = {
          x: rocketsCopy[parA].genes[i].x,
          y: rocketsCopy[parA].genes[i].y
        };
      }

    }

  }

  genes = mutation(genes);
  rockets[nextGenC] = new Rocket(genes);
  nextGenC++;
}


///////////
// The cell
///////////
function Cell(x, y){

  this.coor = Math.createVector(x, y);
  this.pos = Math.createVector(this.coor.x * cellWidth, this.coor.y * cellWidth);

  this.walls = {
    right: true,
    left: true,
    down: true,
    up: true
  };

  this.g = 0;
  this.h = 0;
  this.f = 0;

  this.parent = null;
  this.visited = false;

  this.chooseNext = function(){

    var n = [];

    if(cells[this.coor.x - 1] != undefined){
      if(!cells[this.coor.x - 1][this.coor.y].visited){
        n.push(cells[this.coor.x - 1][this.coor.y]);
      }
    }

    if(cells[this.coor.x + 1] != undefined){
      if(!cells[this.coor.x + 1][this.coor.y].visited){
        n.push(cells[this.coor.x + 1][this.coor.y]);
      }
    }

    if(cells[this.coor.x][this.coor.y - 1] != undefined){
      if(!cells[this.coor.x][this.coor.y - 1].visited){
        n.push(cells[this.coor.x][this.coor.y - 1]);
      }
    }

    if(cells[this.coor.x][this.coor.y + 1] != undefined){
      if(!cells[this.coor.x][this.coor.y + 1].visited){
        n.push(cells[this.coor.x][this.coor.y + 1]);
      }
    }

    return n[Math.randomInt(0, n.length - 1)];

  }

  this.findNeighbors = function(){

    var neigh = [];

    if(cells[this.coor.x - 1] != undefined){
      if(!this.walls.left){
        neigh.push(cells[this.coor.x - 1][this.coor.y]);
      }
    }

    if(cells[this.coor.x + 1] != undefined){
      if(!this.walls.right){
        neigh.push(cells[this.coor.x + 1][this.coor.y]);
      }
    }

    if(cells[this.coor.x][this.coor.y - 1] != undefined){
      if(!this.walls.up){
        neigh.push(cells[this.coor.x][this.coor.y - 1]);
      }
    }

    if(cells[this.coor.x][this.coor.y + 1] != undefined){
      if(!this.walls.down){
        neigh.push(cells[this.coor.x][this.coor.y + 1]);
      }
    }

    return neigh;

  }

  this.render = function(){

    ctx.strokeStyle = "White";
    ctx.lineWidth = 2.5;

    if(this.walls.up){
      // Top line
      ctx.beginPath();
      ctx.moveTo(this.pos.x, this.pos.y);
      ctx.lineTo(this.pos.x + cellWidth, this.pos.y);
      ctx.stroke();
      ctx.closePath();
    }

    if(this.walls.down){
      // Bottom line
      ctx.beginPath();
      ctx.moveTo(this.pos.x, this.pos.y + cellWidth);
      ctx.lineTo(this.pos.x + cellWidth, this.pos.y + cellWidth);
      ctx.stroke();
      ctx.closePath();
    }

    if(this.walls.left){
      // Left line
      ctx.beginPath();
      ctx.moveTo(this.pos.x, this.pos.y);
      ctx.lineTo(this.pos.x, this.pos.y + cellWidth);
      ctx.stroke();
      ctx.closePath();
    }

    if(this.walls.right){
      // Right line
      ctx.beginPath();
      ctx.moveTo(this.pos.x + cellWidth, this.pos.y);
      ctx.lineTo(this.pos.x + cellWidth, this.pos.y + cellWidth);
      ctx.stroke();
      ctx.closePath();
    }

  }

  this.update = function(){

    this.render();

  }

}


////////////////////////////
// A* pathfinding algorithms
////////////////////////////
var closedSet = [];
var openSet = [];
var start;
var end;
var pfDone = false;
var path = [];

function findPath(){

  if(openSet.length > 0){

    var currentH = {
      f: Infinity
    };
    for(var i = 0; i < openSet.length; i++){
      if(currentH.f >= openSet[i].f){
        currentH = openSet[i];
      }
    }

    if(currentH.coor.x == end.coor.x && currentH.coor.y == end.coor.y){
      console.log("A* pathfinding done");
      pfDone = true;

      var temp = currentH;
      while(temp){
        path.push(temp);
        temp = temp.parent;
      }

      return;
    }

    removeFromArr(currentH);
    closedSet.push(currentH);
    var neighbors = currentH.findNeighbors();
    for(var i = 0; i < neighbors.length; i++){

      var n = neighbors[i];

      if(!doesInclude(closedSet, n)){

        var tempG = currentH.g + 1;

        var newPath = false;
        if(doesInclude(openSet, n)){

          if(tempG < n.g){

            n.g = tempG;
            newPath = true;

          }

        } else {

          n.g = tempG;
          openSet.push(n);
          newPath = true;

        }

        if(newPath){

          n.h = calcH(n.coor, end.coor);
          n.f = n.g + n.h;
          n.parent = currentH;

        }

      }

    }

  }

  ctx.globalAlpha = 0.5;
  for(var i = 0; i < openSet.length; i++){
    ctx.fillStyle = "Green";
    ctx.fillRect(openSet[i].pos.x, openSet[i].pos.y, cellWidth, cellWidth);
  }

  for(var i = 0; i < closedSet.length; i++){
    ctx.fillStyle = "Red";
    ctx.fillRect(closedSet[i].pos.x, closedSet[i].pos.y, cellWidth, cellWidth);
  }

  ctx.globalAlpha = 1;
}

function calcH(a, b){
  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
}

function removeFromArr(el){

  for(var i = 0; i < openSet.length; i++){

    if(openSet[i].coor.x == el.coor.x && openSet[i].coor.y == el.coor.y){
      openSet.splice(i, 1);
      break;
    }

  }

}

function doesInclude(arr, el){

  for(var i = 0; i < arr.length; i++){

    if(el.coor.x == arr[i].coor.x && el.coor.y == arr[i].coor.y){
      return true;
    }

  }

  return false;
}

function drawPath(){

  ctx.globalAlpha = 0.75;
  ctx.strokeStyle = "#ffc82e";
  ctx.lineWidth = 4;
  ctx.beginPath();

  for(var i = 0; i < path.length; i++){
    var p = path[i];

    if(i == 0){
      ctx.moveTo(p.pos.x + cellWidth / 2, p.pos.y + cellWidth / 2);
    } else {
      ctx.lineTo(p.pos.x + cellWidth / 2, p.pos.y + cellWidth / 2);
    }

  }

  ctx.stroke();
  ctx.closePath();
  ctx.globalAlpha = 1;

}




js
